(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{246:function(e,t,a){"use strict";a.r(t);var n=a(37),o=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Vim has been my go-to editor for the last 1.5 years, yet I am still learning something new. Recently I sought to learn about the vim's dot ("),a("code",[e._v(".")]),e._v(") command.")]),e._v(" "),a("p",[e._v("Dot command is like a mini macro. Is repeats the last change made. If used correctly, it can save us time doing repetitive tasks.")]),e._v(" "),a("p",[e._v("I am also curious how you guys use dot command - feel free to comment below!")]),e._v(" "),a("h1",{attrs:{id:"how-does-it-work"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-does-it-work","aria-hidden":"true"}},[e._v("#")]),e._v(" How does it work?")]),e._v(" "),a("p",[e._v("If you see the help section in vim ("),a("code",[e._v(":h .")]),e._v("), you'll see:")]),e._v(" "),a("blockquote",[a("p",[e._v("Repeat last change, with count replaced with [count]...")])]),e._v(" "),a("p",[e._v("I immediately thought, \"what does vim mean by 'change'?\"")]),e._v(" "),a("p",[e._v("After some reading and experimenting, I concluded change means any act of updating, adding, or subtracting the content of a file. Moving around does "),a("strong",[e._v("not")]),e._v(" count as a change. Let's see if that is true by some application.")]),e._v(" "),a("h2",{attrs:{id:"example-1-adding-to-the-end-of-each-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-1-adding-to-the-end-of-each-line","aria-hidden":"true"}},[e._v("#")]),e._v(" Example 1: Adding ; to the end of each line")]),e._v(" "),a("p",[e._v("Here is an example ("),a("a",{attrs:{href:"https://www.reddit.com/r/ProgrammerHumor/comments/7uyafj/roses_are_red_violets_are_blue/",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),a("OutboundLink")],1),e._v("). Let's say we want to add "),a("code",[e._v(";")]),e._v(" at the end of each line, this can be done with the help of "),a("code",[e._v(".")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Roses are Red\nViolets are Blue\nUnexpected '{'\nOn line 32\n")])])]),a("p",[e._v("Assume we are starting on top left where 'R' is. We start with "),a("code",[e._v("A ; <esc> j")]),e._v(".")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("A")]),e._v(" jumps to end of line and enters insert mode.")]),e._v(" "),a("li",[a("code",[e._v(";")]),e._v(" adds "),a("code",[e._v('";"')]),e._v(", back to normal mode, then go down.")])]),e._v(" "),a("p",[e._v("Cool, that whole ("),a("code",[e._v("A ; <esc> j")]),e._v(") was one change, right? No. If we do "),a("code",[e._v(". . .")]),e._v(", we end up with")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Roses are Red;\nViolets are Blue;;; <-- what happened?\nUnexpected '{'\nOn line 32\n")])])]),a("p",[e._v("This is because vim does "),a("strong",[e._v("not")]),e._v(" count "),a("code",[e._v("j")]),e._v(" as part of change. Change excludes motions. In this case, vim consider a change to be "),a("code",[e._v("A ; <esc>")]),e._v(". We need to do "),a("code",[e._v("A ; <esc> j . j . j .")]),e._v(". Dot, down, dot, down, dot, down.")]),e._v(" "),a("h2",{attrs:{id:"example-2-deleting-specific-word-but-not-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2-deleting-specific-word-but-not-all","aria-hidden":"true"}},[e._v("#")]),e._v(" Example 2: Deleting specific word, but not all")]),e._v(" "),a("p",[e._v("For example, suppose our poem says this instead:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Roses are Red Blue\nViolets are Blue\nUnexpected Blue '{'\nOn line Blue 32\n")])])]),a("p",[e._v("We need to delete Blues except the one on line two. We can very quickly do it using dot command.")]),e._v(" "),a("p",[a("code",[e._v("/ Blue c i w <backspace> <esc>")]),e._v(" deletes first Blue. Then "),a("code",[e._v("n n . n .")])]),e._v(" "),a("p",[e._v("This time, our change consist of:")]),e._v(" "),a("ol",[a("li",[e._v("Delete the entire word Blue and entering insert mode ("),a("code",[e._v("c i w")]),e._v(")")]),e._v(" "),a("li",[e._v("Backspace while in insert mode")]),e._v(" "),a("li",[e._v("Exit")])]),e._v(" "),a("p",[e._v("I am starting to see a pattern here. "),a("code",[e._v("/ Blue")]),e._v(" and "),a("code",[e._v("n")]),e._v(" are not considered change by vim, but "),a("code",[e._v("c i w <Backspace> <esc>")]),e._v(" does.")]),e._v(" "),a("p",[e._v("Let's do another example:")]),e._v(" "),a("h2",{attrs:{id:"example-3-adding-at-the-beginning-on-each-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-3-adding-at-the-beginning-on-each-line","aria-hidden":"true"}},[e._v("#")]),e._v(" Example 3: Adding ( at the beginning on each line")]),e._v(" "),a("p",[e._v("Another one, suppose you have:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("One)\nTwo)\nThree)\n")])])]),a("p",[e._v("We are adding ( at the start of each word. You can do "),a("code",[e._v("I ( <esc>")]),e._v(" to apply the change to the first, then "),a("code",[e._v("j . j .")]),e._v(". Change here is "),a("code",[e._v("I ( <esc>")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"comparing-what-changed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparing-what-changed","aria-hidden":"true"}},[e._v("#")]),e._v(" Comparing what 'changed'")]),e._v(" "),a("p",[e._v("Let's compare all of the repeatable changes from the past few examples:")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("A ; <esc>")])]),e._v(" "),a("li",[a("code",[e._v("c i w <Backspace> <Esc>")])]),e._v(" "),a("li",[a("code",[e._v("I ( <esc>")])])]),e._v(" "),a("p",[e._v("Do you see a pattern? They all "),a("em",[e._v("start")]),e._v(" with commands that put you into insert mode (c, A, and I are all command that results in entering Insert mode) and end with "),a("code",[e._v("<esc>")]),e._v(" .")]),e._v(" "),a("p",[e._v("Another one I didn't mention was delete commands like "),a("code",[e._v("dd")]),e._v(". I can delete lines repeatedly by "),a("code",[e._v("dd . . . .")]),e._v(". Although dd does not enter insert mode, vim considers it as a change because it deletes an entire line. Remember, anything that adds, removes, or updates text is considered as change by vim.")]),e._v(" "),a("h1",{attrs:{id:"application"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#application","aria-hidden":"true"}},[e._v("#")]),e._v(" Application")]),e._v(" "),a("p",[e._v("Above are some application of dot commands. It can save us a few keystrokes - a few keystrokes saved is time gained. Next time we are doing repetitive task, see if you can repeat it with the dot command.")]),e._v(" "),a("p",[e._v("Thanks for reading! I really appreciate you making it this far. Happy hacking!")]),e._v(" "),a("h1",{attrs:{id:"resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resources","aria-hidden":"true"}},[e._v("#")]),e._v(" Resources:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.amazon.com/Practical-Vim-Thought-Pragmatic-Programmers/dp/1934356980",target:"_blank",rel:"noopener noreferrer"}},[e._v("Practical Vim"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/7325052/why-the-dot-command-is-so-useful-in-vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why the dot (.) command is so useful in VIM?"),a("OutboundLink")],1)])]),e._v(" "),a("h1",{attrs:{id:"discuss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#discuss","aria-hidden":"true"}},[e._v("#")]),e._v(" Discuss")]),e._v(" "),a("p",[e._v("I am interested to learn how other devs take advantage of the dot command. What other ways do you think dot commands can be used?")])])},[],!1,null,null,null);t.default=o.exports}}]);