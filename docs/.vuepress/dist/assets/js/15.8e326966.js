(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{244:function(e,a,t){"use strict";t.r(a);var n=t(37),s=Object(n.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v('"I was a bit challenged when I was younger to stay on the right path" - Dwayne Johnson')])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://media.giphy.com/media/kNA1sKSqxgFDq/giphy.gif",alt:"dwayne"}})]),e._v(" "),t("p",[e._v("Such wisdom. Not all path leads to happiness. The wrong "),t("code",[e._v("PATH")]),e._v(" will lead you to unhappiness. Here we will learn the right path and stay in it!")]),e._v(" "),t("p",[e._v("There are many things you can learn about path. I think the two important ones are:")]),e._v(" "),t("ol",[t("li",[e._v("Finding your path")]),e._v(" "),t("li",[e._v("Updating your paths.")])]),e._v(" "),t("h1",{attrs:{id:"finding-your-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#finding-your-path","aria-hidden":"true"}},[e._v("#")]),e._v(" Finding your PATH")]),e._v(" "),t("p",[e._v("In mac, you can find path from command line by typing "),t("code",[e._v("echo $PATH")]),e._v(". Mine looks something like this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("echo $PATH\n/Users/iggy/.nvm/versions/node/v10.15.1/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n")])])]),t("p",[e._v("Path is colon ("),t("code",[e._v(":")]),e._v(") separated and it reads from left to right.")]),e._v(" "),t("p",[e._v("For example, if I execute "),t("code",[e._v("node")]),e._v(", my terminal would first search node "),t("em",[e._v("executable")]),e._v(" at ("),t("code",[e._v("/Users/iggy/.nvm/versions/node/v10.15.1/bin")]),e._v("), then ("),t("code",[e._v("/usr/local/bin")]),e._v("), etc. If node was not found anywhere, it will return "),t("code",[e._v("command not found: node")]),e._v(".")]),e._v(" "),t("p",[e._v("To find which path node currently uses, run "),t("code",[e._v("which node")]),e._v(", in my case, I see:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/Users/iggy/.nvm/versions/node/v10.15.1/bin/node\n")])])]),t("p",[e._v("Note the similarities between my one of my paths and node path:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#PATH\n/Users/iggy/.nvm/versions/node/v10.15.1/bin \n\n#node path\n/Users/iggy/.nvm/versions/node/v10.15.1/bin/node \n")])])]),t("h1",{attrs:{id:"updating-your-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#updating-your-path","aria-hidden":"true"}},[e._v("#")]),e._v(" Updating your path")]),e._v(" "),t("p",[e._v("You can either "),t("em",[e._v("prepend")]),e._v(" or "),t("em",[e._v("append")]),e._v(" your path")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PATH=/your/new/prepend/path:$PATH\nPATH=$PATH:/your/new/append/path\n")])])]),t("p",[e._v("This type of change is temporary. It will disappear when the terminal is closed. To make it permanent, update path inside "),t("code",[e._v(".bash_profile")]),e._v(" or "),t("code",[e._v(".profile")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('export PATH="~/new/path:$PATH"\n')])])]),t("h1",{attrs:{id:"application-let-s-hack-a-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#application-let-s-hack-a-path","aria-hidden":"true"}},[e._v("#")]),e._v(" Application: let's hack a path!")]),e._v(" "),t("p",[e._v("Suppose you are an evil person and wanted to modify the "),t("code",[e._v("node")]),e._v(" command of your coworker so when they run "),t("code",[e._v("node")]),e._v(", they are running your script instead. All you need is to prepend your own path so when they run "),t("code",[e._v("node")]),e._v(", path will execute your node executable first. Here is how you can do it:")]),e._v(" "),t("p",[e._v("Create "),t("code",[e._v("/for-fun")]),e._v(" dir, inside create a file named "),t("code",[e._v("node")]),e._v(". Make sure to add "),t("code",[e._v("#!/bin/bash")]),e._v(" (shebang) on first line:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#!/bin/bash\necho "ALL YOUR FILES ARE GONE *EVIL LAUGHS*"\n')])])]),t("p",[e._v("Save, then grant permission "),t("code",[e._v("chmod +x ./node")]),e._v(". Adding shebang and permission are required so they can run "),t("code",[e._v("node")]),e._v(" directly instead of "),t("code",[e._v("./node")])]),e._v(" "),t("p",[e._v("Prepend path:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PATH=/Users/iggy/for-fun:$PATH\n")])])]),t("p",[e._v("(replace "),t("code",[e._v("Users/iggy/for-fun")]),e._v(" with whatever path you used. You can use "),t("code",[e._v("pwd")]),e._v(" if you're not sure where you're at)")]),e._v(" "),t("p",[e._v("Check your newly appended path ("),t("code",[e._v("echo $PATH")]),e._v(") to make sure our prepend path is the first path displayed. Check also your node path ("),t("code",[e._v("which node")]),e._v(") - you should see the updated path.")]),e._v(" "),t("p",[e._v("Cool! Next time someone runs "),t("code",[e._v("node")]),e._v(", they'll see:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("node\nALL YOUR FILES ARE GONE *EVIL LAUGHS*\n")])])]),t("p",[e._v("That's all folks.  Happy hacking!!")])])},[],!1,null,null,null);a.default=s.exports}}]);